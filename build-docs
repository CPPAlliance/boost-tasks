#!/bin/bash -e
#
# build-docs
#
#   Builds master & develop, exporting from subversion repos.
#
# build-docs download
#
#  Downloads tarballs.
#
# build-docs build branches...
#
#   Builds the given branches.
#   Exports from git.
#
# build-docs upload
#
#   Upload any outstanding upload to sandbox and cowic
#
# Your ~/.ssh should contain public and private ssh keys for
# uploading to sourceforge sandbox. Your .netrc should contain
# the login details for cowic.
#
# You probably want to deactivate any hard drive indexing service for
# this directory. For OS X, go to the spotlight preference pane, and
# look under the 'privacy' tab.

###############################################################################
#
# Initial setup
#
# Try to follow this (I'm sure I don't at some point):
# http://www.davidpashley.com/articles/writing-robust-shell-scripts.html

# Exit on error
set -e
# Treat unset parameters as an error
set -u

cd $(dirname $0)
root=$(pwd)

# This script uses background tasks in a few places, so try to kill them if
# things go wrong. Doesn't seem to always work properly though. Might not
# be worth using background tasks.
#
# http://stackoverflow.com/questions/360201/kill-background-process-when-shell-script-exit
trap 'if [ "$(jobs -p)x" != x ]; then kill $(jobs -p); fi' INT TERM EXIT

###############################################################################
#
# Configuration

# Libraries to build documentation for
export STANDALONE_DOCUMENTATION="geometry phoenix fusion spirit spirit/repository crc algorithm context coroutine numeric/odeint log tti functional/factory functional/forward"

# Libraries to upload documentation for. Uploads all of libs/name, so no need
# to include nested libraries.
export UPLOAD_DOCUMENTATION="log geometry phoenix fusion spirit crc algorithm context coroutine numeric/odeint container tti functional/factory functional/forward"

# Compiler details, leave ccache blank if you don't use it.
export CCACHE_BIN="ccache"
export CXX_BIN="g++-mp-4.8"
export CXX_FLAGS="--std=c++0x"
export B2_TOOLSET="darwin"

# TODO: Setting DOXYGEN_BIN to anything else won't work for geometry.
# TODO: Perhaps write a shell script to the bin directory.
export DOXYGEN_BIN="doxygen"
export RAPIDXML_VERSION=1.13
export SOURCEFORGE_USERNAME=danieljames

export RAPIDXML_FILENAME=rapidxml-${RAPIDXML_VERSION}.zip
export GIT_URL=$root/../mirror

###############################################################################
#
# Main

main()
{
    if [ $# = 0 ]; then
        upload_documentation
        build master develop
    else
        case $1 in
        "download")     download true ;;
        "build")        shift ; upload_documentation ; build $* ;;
        "upload")       upload_documentation ;;
        *)              echo "Unknown command: $1"; exit 1;;
        esac
    fi
}

###############################################################################
#
# Download/update from internet
#
# TODO: Just the relevant branches?

download()
{
    cd $root/tarballs

    if [ ! -f ${RAPIDXML_FILENAME} ]
    then
        if $download
        then
            echo
            echo "Downloading rapidxml"
            echo

            wget -O ${RAPIDXML_FILENAME} \
                http://sourceforge.net/projects/rapidxml/files/rapidxml/rapidxml%20${RAPIDXML_VERSION}/${RAPIDXML_FILENAME}/download
        else
            echo
            echo "Can't download ${RAPIDXML_FILENAME}."

            exit -1
        fi
    fi
}

###############################################################################
#
# Check that executables are available and set some environment variables.

setup_executables() {
    # Could I do this without a global?
    export CHECK_FAILED=0

    check_executable git
    check_executable 7za
    check_executable dvips
    check_executable $DOXYGEN_BIN
    check_executable $CXX_BIN
    check_file $root/tarballs/rapidxml-1.13.zip

    if [ x$CCACHE_BIN != x ]
    then
        check_executable $CCACHE_BIN
    fi

    if [ $CHECK_FAILED = 1 ]
    then
        exit 1
    fi
}

check_executable() {
    name=$1

    if type -P $name > /dev/null
    then
        echo "Found $name"
    else
        echo "Error: couldn't find $name"
        export CHECK_FAILED=1
    fi
}

check_file() {
    name=$1

    if [ -f $name ]
    then
        echo "Found $name"
    else
        echo "Error: couldn't find $name"
        export CHECK_FAILED=1
    fi

}

###############################################################################
#
# Build
#
# Builds the given branches as child processes so that output can be piped
# and errors don't end the whole script.

build()
{
    echo
    echo Check that execuables are available.
    echo

    setup_executables

    echo
    echo "Setup output directory."
    echo

    setup_output_dir

    download | tee $output/download.log

    for branch in $*
    do
        echo "Build branch $branch " >> $output/summary.txt
        echo >> $output/summary.txt

        echo
        echo "Build branch $branch."
        echo

        build_impl $branch $output 2>&1 | tee $output/build-$branch.log

        echo >> $output/summary.txt
    done

    echo
    echo "Upload."
    echo

    # Upload to sandbox and cowic
    upload_documentation | tee $output/upload.log

    echo
    echo "Summary."
    echo

    cat $output/summary.txt
}

###############################################################################
#
# The main build

build_impl()
{
    name=$1
    output=$2

    build_dir=$root/build/build-$name
    boost_root=$build_dir/boost
    inspect_root=$build_dir/boost-inspect
    exec_dir=$build_dir/bin

    if [ -d $build_dir ]
    then
        rm -rf $build_dir
    fi

    echo
    echo "Setup Build Directory"
    echo

    mkdir $build_dir
    mkdir $exec_dir

    touch $build_dir/user-config.jam
    echo "using doxygen : $DOXYGEN_BIN ;"  >> $build_dir/user-config.jam
    echo "using $B2_TOOLSET : : $CCACHE_BIN $CXX_BIN $CXX_FLAGS ;" >> $build_dir/user-config.jam
    echo 'using boostbook ;' >> $build_dir/user-config.jam

    echo
    echo "Export repo"
    echo

    git_export_recursive ${GIT_URL}/boostorg/boost.git \
        refs/heads/$name $boost_root

    # Make a clean copy that can be used for inspection later.
    mkdir $inspect_root
    cd $boost_root
    pax -rwl . $inspect_root

    echo
    echo "Starting Build"
    echo

    # So that boost build will use the user-config.jam created for this
    # build
    export HOME=$build_dir
    export PATH=$exec_dir:$PATH

    # Build b2 executable

    echo
    echo "Build b2"
    echo

    cd $boost_root/tools/build
    ./bootstrap.sh
    B2_EXEC=$boost_root/tools/build/b2

    # Copy b2 to the root, so that it can be called by geometry's
    # python script.
    cp $B2_EXEC $boost_root

    echo
    echo "Link headers"
    echo

    cd $boost_root
    $B2_EXEC headers

    cd $inspect_root
    $B2_EXEC headers

    echo
    echo "Build quickbook"
    echo

    cd $boost_root/tools/quickbook
    $B2_EXEC -q
    echo "using quickbook : ${boost_root}/dist/bin/quickbook ;" >> $build_dir/user-config.jam

    echo
    echo "Build auto-index"
    echo

    cd $boost_root/tools/auto_index/build
    $B2_EXEC -q
    echo "using auto-index : ${boost_root}/dist/bin/auto_index ;" >> $build_dir/user-config.jam

    if [ -d $boost_root/libs/geometry ]; then

        echo
        echo "Build doxgen_xml2qbk"
        echo

        cd $boost_root/libs/geometry/doc/src/docutils/tools/doxygen_xml2qbk/contrib
        unzip -n $root/tarballs/${RAPIDXML_FILENAME}

        cd $boost_root/libs/geometry/doc/src/docutils/tools/doxygen_xml2qbk

        if $B2_EXEC -a -q; then
            # TODO: Or could just put dist/bin on the path?
            cp $boost_root/dist/bin/doxygen_xml2qbk $exec_dir
        else
            echo "Error building: doxgen_xml2qbk" >> $output/summary.txt
        fi

        rm -rf src/docutils/tools/doxygen_xml2qbk/contrib/rapid*
    fi

    for library in $STANDALONE_DOCUMENTATION
    do
        echo
        echo "Build $library docs"
        echo

        if [ -d $boost_root/libs/$library/doc ]
        then
            if [ $library = 'geometry' ]
            then
                cd $boost_root/libs/geometry/doc
                DOXYGEN=$DOXYGEN_BIN \
                    python ./make_qbk.py || echo "Error building: $library" >> $output/summary.txt
                rm -r generated
                rm -r doxy/doxygen_output
            else
                cd $boost_root/libs/$library/doc
                find html -name "*.html" -print0 | xargs -0 rm
                $B2_EXEC --enable-index || echo "Error building: $library" >> $output/summary.txt
            fi
        else
            echo "No directory for $library."
        fi
    done

    echo
    echo "Build main docs"
    echo

    rm -rf $boost_root/doc/html
    cd $boost_root/doc
    $B2_EXEC doc xsl:param="collect.xref.targets=yes" xsl:param="targets.filename=../combined.db" -q || echo "Error building: combined documentation" >> $output/summary.txt
    $B2_EXEC asio xsl:param="collect.xref.targets=yes" xsl:param="targets.filename=../asio.db" -q || echo "Error building: combined documentation" >> $output/summary.txt

    echo "Finished building." >> $output/summary.txt

    echo
    echo "Create zipfiles"
    echo

    echo "Creating zipfiles..." >> $output/summary.txt

    target=boost-$name-docs.7z

    cd $boost_root
    compress_dirs="doc/html"

    for library in $STANDALONE_DOCUMENTATION
    do
        if [ -d $boost_root/libs/$library/doc ]
        then
            compress_dirs="$compress_dirs libs/$library/doc/html"
        fi
    done

    7za a $output/$target $compress_dirs

    if [ $name = 'develop' -o $name = 'master' ]; then
        # Link file in upload directory, so that it will later
        # be uploaded via. ftp.

        ln $output/$target $root/upload/$target.upload
    fi

    if [ $name = master ]; then
        echo $boost_root > $root/upload/upload-master
    fi

    echo "Finished zipfiles." >> $output/summary.txt

    echo "Building and running inspect." >> $output/summary.txt

    echo
    echo "Build inspect"
    echo

    cd $boost_root/tools/inspect/build
    $B2_EXEC -q

    echo
    echo "Extract docs into inspect copy"
    echo

    cd $inspect_root
    7za x -y $output/$target

    echo
    echo "Run inspect"
    echo

    cd $inspect_root
    $boost_root/dist/bin/inspect > $output/docs-inspect-$name.html || true

    if [ $name = 'develop' -o $name = 'master' ]; then
        ln $output/docs-inspect-$name.html $root/upload/docs-inspect-$name.html.upload
    fi

    echo "Finished inspect." >> $output/summary.txt

    echo
    echo

    echo "All OK." >> $output/summary.txt
}

###############################################################################
#
# Upload documentation

upload_documentation()
{
    upload_cowic || echo "Upload to cowic failed."

    if [ -f $root/upload/upload-master ]; then
        upload_master || echo "Upload master docs to sourceforge failed."
    fi
}

upload_master()
{
    boost_root=$(cat $root/upload/upload-master)
    failed=0

    if [ -d ${boost_root} ]
    then
        for library in $UPLOAD_DOCUMENTATION
        do
            if rsync -avz --delete-after --delete-excluded \
                ${boost_root}/libs/$library/ \
                ${SOURCEFORGE_USERNAME},boost-sandbox@web.sourceforge.net:htdocs/libs/$library/
            then
                echo "Uploaded $library."
            else
                echo "Failed to upload $library."
                failed=1
            fi
        done

        if rsync -avz --exclude-from $root/exclude.txt --delete-after \
            ${boost_root}/ \
            ${SOURCEFORGE_USERNAME},boost-sandbox@web.sourceforge.net:htdocs/
        then
            echo "Uploaded combined documentation."
        else
            echo "Failed to upload combined documentation."
            failed=1
        fi

        if [ $failed = 1 ]
        then
            echo "Failed to upload to sourceforge"
        else
            rm $root/upload/upload-master
        fi
    else
        echo "Unable to find master to upload."
        exit 1
    fi
}

upload_cowic()
{
    nl="
"
    cd $root/upload

    for f in $(ls *.upload)
    do
        f2=$(echo $f | sed "s/\.upload$//")
        echo "Uploading $f2"

        echo "put $f ${nl} rename $f $f2" | ftp -v boost.cowic.de 2>&1 | tee upload.log

        if grep '^250 Rename successful' upload.log
        then
            rm $f
        fi

        rm upload.log
    done
}

###############################################################################
#
# Setup Output Directory

setup_output_dir()
{
    export output=$root/history/$(date -u '+%Y%m%d-%H%M')

    if test -d $output; then
        rmdir $output
    fi

    mkdir $output
    touch $output/summary.txt
}

###############################################################################
#
# git export

git_export_recursive()
{
    git_dir=$1
    ref=$2
    destination=$3

    echo "Exporting repo"

    mkdir -p $destination
    git --git-dir=${git_dir} archive ${ref} | tar -x -C ${destination}

    git config -f $destination/.gitmodules -l |
        grep '^submodule\.\w*\.path=' |
        sed 's/submodule\.\(.*\)\.path=\(.*\)/\1 \2/' |
        while read line
        do
            set $line
            name=$1
            path=$2

            hash=$(git --git-dir=$git_dir \
                ls-tree $ref $path |
                cut -f 1 | cut -d ' ' -f 3)

            repo=$(git config -f $destination/.gitmodules submodule.$name.url)
            #TODO: Check that repo is a relative path...

            echo "Export ${name}"
            git --git-dir=${git_dir}/${repo} archive ${hash} |
                tar -x -C ${destination}/${path}
        done
}

###############################################################################
#
# Launch Main

main $*
