#!/usr/bin/env php
<?php

require_once(__DIR__.'/vendor/autoload.php');

use BoostTasks\TempDirectory;
use BoostTasks\BinTrayCache;

function main() {
    $options = CommandLineOptions::process($_SERVER['argv'],
        'Update the website development documentation from BinTray.');
    if (is_numeric($options)) { exit($options); }
    EvilGlobals::init($options);

    foreach(array('master', 'develop') as $branch) {
        try {
            update_documentation($branch);
        }
        catch(RuntimeException $e) {
            Log::error($e);
        }
    }
}

function update_documentation($branch) {
    // Get archive path setting.
    $archives_path = EvilGlobals::settings('website-archives');
    if (!$archives_path) {
        throw new RuntimeException("website-archives not set");
    }
    if (!is_dir($archives_path)) {
        throw new RuntimeException("website-archives not a directory");
    }
    $archives_path = rtrim($archives_path, '/');

    // Check the location we'll install the documentation at.
    // TODO: Store date instead of version?
    $destination_path = "{$archives_path}/{$branch}";
    $version = is_file("{$destination_path}/.bintray-version") ?
        file_get_contents("{$destination_path}/.bintray-version") :
        '';

    // Download file details from bintray...
    $cache = new BinTrayCache;
    foreach($cache->fetchDetails($branch) as $file) {
        if ($version == $file->version) {
            Log::info("{$branch} documentation: Already installed: {$file->name}, version {$file->version}.");
            return;
        }

        Log::info("{$branch} documentation: Attempt to install {$file->name}, version {$file->version}.");

        // Download tarball.
        $file_path = $cache->cachedDownload($file);
        if (!$file_path) {
            Log::info("Download failed.");
            continue;
        }

        Log::debug("{$branch} documentation: Extracting to {$destination_path}.");

        // Extract into a temporary directory.
        $temp_directory = new TempDirectory("{$archives_path}/tmp");
        $extract_path = extract_single_root_archive($file_path, $temp_directory->path);

        // Add the version details.
        file_put_contents("{$extract_path}/.bintray-version", $file->version);

        // Replace the old documentation.
        // Would be nice to overwrite old archive in a cleaner manner...
        if (realpath($destination_path)) { rename($destination_path, "{$temp_directory->path}/old"); }
        rename($extract_path, $destination_path);

        $cache->cleanup($branch);
        Log::info("{$branch} documentation: Successfully installed documentation.");
        return;
    }

    throw new RuntimeException("Unable to download any of the files.");
}

function extract_single_root_archive($file_path, $tmpdir) {
    $subdir = "{$tmpdir}/new";
    mkdir($subdir);

    list($base_name, $extension) = explode('.', basename($file_path), 2);

    switch($extension) {
    case 'tar.bz2':
        Process::run("tar -xjf '{$file_path}'", $subdir, null, null, 60*10);
        break;
    case 'tar.gz':
        Process::run("tar -xzf '{$file_path}'", $subdir, null, null, 60*10);
        break;
    case '7z':
        Process::run("7z x '{$file_path}'", $subdir, null, null, 60*10);
        break;
    case 'zip':
        Process::run("unzip '{$file_path}'", $subdir, null, null, 60*10);
        break;
    default:
        assert(false);
    }

    // Find the extracted tarball in the temporary directory.
    $new_directories = array_filter(scandir($subdir),
        function($x) { return $x[0] != '.'; });
    if (count($new_directories) == 0) {
        throw new RuntimeException("Error extracting archive");
    }
    else if (count($new_directories) != 1) {
        throw new RuntimeException("Multiple roots in archive");
    }
    return "{$subdir}/".reset($new_directories);
}

main();
