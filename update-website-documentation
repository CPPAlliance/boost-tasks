#!/usr/bin/env php
<?php

require_once(__DIR__.'/vendor/autoload.php');

function main() {
    $options = CommandLineOptions::process($_SERVER['argv'],
        'Update the website development documentation from BinTray.');
    EvilGlobals::init($options);

    // TODO: Resolve path
    $archives_path = EvilGlobals::settings('website-archives');
    if (!$archives_path) {
        throw new RuntimeException("website-archives not set");
    }
    if (!is_dir($archives_path)) {
        throw new RuntimeException("website-archives not a directory");
    }
    $archives_path = rtrim($archives_path, '/');

    foreach(array('master', 'develop') as $branch) {
        try {
            // Download file from bintray...
            $cache = new BinTrayCache;
            $file = $cache->fetch_details($branch, '.tar.bz2');

            $destination_path = "{$archives_path}/{$branch}";
            $version = is_file("{$destination_path}/.bintray-version") ?
                file_get_contents("{$destination_path}/.bintray-version") :
                '';

            if ($version != $file->version) {
                // Download tarball.
                $file_path = $cache->cached_download($file);
                Log::info("Extracting {$file_path} to {$destination_path}.");

                // Extract into a temporary directory.
                $temp_directory = new TemporaryDirectory("{$archives_path}/tmp");
                Process::run("tar -xjf '{$file_path}'", $temp_directory->path, null, null, 60*10);

                // Find the extracted tarball in the temporary directory.
                $new_directories = array_filter(scandir($temp_directory->path), function($x) { return $x[0] != '.'; });
                if (count($new_directories) != 1) {
                    throw new RuntimeException("Something went wrong extracting archive");
                }
                $extract_path = "{$temp_directory->path}/".reset($new_directories);

                // Add the version details.
                file_put_contents("{$extract_path}/.bintray-version", $file->version);

                // Replace the old documentation.
                // Would be nice to overwrite old archive in a cleaner manner...
                if (realpath($destination_path)) { rename($destination_path, "{$temp_directory->path}/old"); }
                rename($extract_path, $destination_path);
            }
        }
        catch(RuntimeException $e) {
            Log::error($e);
        }
    }
}

class TemporaryDirectory {
    var $path;

    function __construct($tmp_root = null) {
        if (is_null($tmp_root)) { $tmp_root = sys_get_temp_dir(); }

        if (!is_dir($tmp_root)) {
            throw new RuntimeException("Temporary directory doesn't exist: {$tmp_root}");
        }

        if (!is_writable($tmp_root)) {
            throw new RuntimeException("Temporary directory isn't writable: {$tmp_root}");
        }

        // Create temporary directory.
        // Race condition here, but seems unlikely to be a real problem.
        $temp_name = tempnam($tmp_root, "download");
        if (!$temp_name) { return false; }
        if (strpos($temp_name, "{$tmp_root}/") !== 0) {
            throw new RuntimeException("Incorrect location for temporary directory.");
        }
        unlink($temp_name);
        mkdir($temp_name);
        $temp_name = realpath($temp_name);
        if (!$temp_name || !is_dir($temp_name) || strpos($temp_name, "{$tmp_root}/") !== 0) {
            throw new RuntimeException("Something went wrong creating temporary directory.");
        }

        $this->path = $temp_name;
    }

    function __destruct() {
        if ($this->path) { recursive_remove($this->path); }
    }

    function getPath() {
        return $this->path;
    }
}

// TODO: Better error handling.
function recursive_remove($path) {
    if (is_file($path) || is_link($path)) {
        unlink($path);
    }
    else if (is_dir($path)) {
        foreach(scandir($path) as $child) {
            if ($child == '.' || $child == '..') { continue; }
            $child_path = "{$path}/{$child}";
            recursive_remove($child_path);
        }
        rmdir($path);
    }
}

class BinTrayCache {
    var $path;

    function __construct() {
        $this->path = EvilGlobals::data_path('bintray');
    }

    function fetch_details($branch, $extension) {
        $extension = '.'.ltrim($extension, '.');

        // Download the file list from bintray.
        $files = file_get_contents(
            "https://api.bintray.com/packages/boostorg/{$branch}/snapshot/files");
        if (!$files) {
            throw new RuntimeException("Error downloading file details from bintray.");
        }

        $files = json_decode($files);
        if (!$files) {
            throw new RuntimeException("Error parsing latest details.");
        }

        $file = null;
        foreach($files as $x) {
            if (preg_match('@'.preg_quote($extension, '@').'$@', $x->name)) {
                if ($file) {
                    throw new RuntimeException("More than one file found.");
                }
                $file = $x;
            }
        }
        if (!$file) {
            throw new RuntimeException("Unable to find file to download.");
        }

        return $file;
    }

    function cached_download($file) {
        $date = date('Y-m-d', strtotime($file->created));
        // 'repo' is actually the branch, that's just the way bintray is organised.
        $download_dir = "{$this->path}/{$file->repo}/{$date}/{$file->sha1}";
        $download_path = "{$download_dir}/{$file->name}";

        if (!is_file($download_path)) {
            mkdir($download_dir, 0777, true);
            if (!$this->download_file(
                "http://dl.bintray.com/boostorg/{$file->repo}/{$file->name}",
                $download_path))
            {
                throw new RuntimeException("Error downloading file from bintray");
            }
        }

        if (hash_file('sha256', $download_path) != $file->sha256) {
            Log::error("File signature doesn't match: {$download_path}");
            throw new RuntimeException("File signature doesn't match");
        }

        return $download_path;
    }

    // TODO: Download to temporary file and move into position.
    function download_file($url, $dst_path) {
        Log::info("Downloading {$url} to {$dst_path}.");
        $download_fh = fopen($url, 'rb');
        if (!$download_fh) { return false; }

        $save_fh = fopen($dst_path, "wb");
        if (!$save_fh) { return false; }

        $failed = false;
        while (!feof($download_fh)) {
            $chunk = fread($download_fh, 8192);
            if ($chunk === false) { $failed = true; break; }
            if (fwrite($save_fh, $chunk) === false) { $failed = true; break; }
        }
        $chunk = null;

        return true;
    }
}

main();
